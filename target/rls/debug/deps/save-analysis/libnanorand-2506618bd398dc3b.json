{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2","program":"C:\\Users\\malique\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","nanorand","--edition=2018","C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"chacha\"","--cfg","feature=\"default\"","--cfg","feature=\"pcg64\"","--cfg","feature=\"std\"","--cfg","feature=\"tls\"","--cfg","feature=\"wyrand\"","-C","metadata=2506618bd398dc3b","-C","extra-filename=-2506618bd398dc3b","--out-dir","c:\\Users\\malique\\important_stuff\\rust\\Project X\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\malique\\important_stuff\\rust\\Project X\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\malique\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\malique\\important_stuff\\rust\\Project X\\target\\rls\\debug\\deps\\libnanorand-2506618bd398dc3b.rmeta"},"prelude":{"crate_id":{"name":"nanorand","disambiguator":[1888655611455482136,9886358613182344263]},"crate_root":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src","external_crates":[{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[902711862199739234,15082167224296373374]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","num":2,"id":{"name":"core","disambiguator":[5048311760381386034,12753961808535803278]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[847775214756591688,12437863933651081164]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18098153966720408130,4102567439342721650]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14085577876822856882,15393158987199036233]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[3188366355873518403,14471389999965490426]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10237517513868340142,18396708545822173986]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17305999185247584930,14125623615750666193]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7451980452763147359,4800032867518142595]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[842541340887862638,17591716377464122790]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14650435931294811010,18006816567319070280]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[16073749092757737146,5785406473963590530]}},{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[9426002052484834533,14451905897035318657]}}],"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":5435,"line_start":1,"line_end":93,"column_start":1,"column_end":13}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5081,"byte_end":5082,"line_start":78,"line_end":78,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5098,"byte_end":5099,"line_start":79,"line_end":79,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"WyRand, RNG","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5138,"byte_end":5145,"line_start":81,"line_end":81,"column_start":14,"column_end":21},"alias_span":null,"name":"tls_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":11173,"byte_end":11192,"line_start":12,"line_end":12,"column_start":18,"column_end":37},"alias_span":null,"name":"entropy_from_system","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":19938,"byte_end":19944,"line_start":2,"line_end":2,"column_start":17,"column_end":23},"alias_span":null,"name":"ChaCha","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":19987,"byte_end":19992,"line_start":4,"line_end":4,"column_start":16,"column_end":21},"alias_span":null,"name":"Pcg64","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20037,"byte_end":20043,"line_start":6,"line_end":6,"column_start":17,"column_end":23},"alias_span":null,"name":"WyRand","value":"","parent":{"krate":0,"index":101}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":5435,"line_start":1,"line_end":93,"column_start":1,"column_end":13},"name":"","qualname":"::","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":25},{"krate":0,"index":48},{"krate":0,"index":101},{"krate":0,"index":261}],"decl_id":null,"docs":" A library meant for fast, random number generation with quick compile time, and minimal dependencies.","sig":null,"attributes":[{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":43,"byte_end":67,"line_start":2,"line_end":2,"column_start":1,"column_end":25}},{"value":"/ A library meant for fast, random number generation with quick compile time, and minimal dependencies.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":69,"byte_end":174,"line_start":4,"line_end":4,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":175,"byte_end":178,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":179,"byte_end":193,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/ ## Generating a number with an initialized RNG","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":194,"byte_end":244,"line_start":7,"line_end":7,"column_start":1,"column_end":51}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":245,"byte_end":256,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/ use nanorand::{RNG, WyRand};","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":257,"byte_end":289,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":290,"byte_end":293,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ let mut rng = WyRand::new();","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":294,"byte_end":326,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"/ println!(\"Random number: {}\", rng.generate::<u64>());","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":327,"byte_end":384,"line_start":12,"line_end":12,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":385,"byte_end":392,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ ## Generating a number with a thread-local RNG","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":393,"byte_end":443,"line_start":14,"line_end":14,"column_start":1,"column_end":51}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":444,"byte_end":455,"line_start":15,"line_end":15,"column_start":1,"column_end":12}},{"value":"/ use nanorand::RNG;","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":456,"byte_end":478,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":479,"byte_end":482,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let mut rng = nanorand::tls_rng();","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":483,"byte_end":521,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/ println!(\"Random number: {}\", rng.generate::<u64>());","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":522,"byte_end":579,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":580,"byte_end":587,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ ## Generating a number in a range","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":588,"byte_end":625,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":626,"byte_end":637,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/ use nanorand::{RNG, WyRand};","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":638,"byte_end":670,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":671,"byte_end":674,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut rng = WyRand::new();","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":675,"byte_end":707,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/ println!(\"Random number between 1 and 100: {}\", rng.generate_range::<u64>(1, 100));","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":708,"byte_end":795,"line_start":26,"line_end":26,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":796,"byte_end":803,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ## Shuffling a Vec","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":804,"byte_end":826,"line_start":28,"line_end":28,"column_start":1,"column_end":23}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":827,"byte_end":838,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ use nanorand::{RNG, WyRand};","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":839,"byte_end":871,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":872,"byte_end":875,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut rng = WyRand::new();","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":876,"byte_end":908,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ let mut items = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":909,"byte_end":965,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/ rng.shuffle(&mut items);","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":966,"byte_end":994,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":995,"byte_end":1002,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1003,"byte_end":1006,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ## Why should I use this over...","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1007,"byte_end":1043,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1044,"byte_end":1047,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ * `rand` - The standard rand crate is a complex beast. It contains unsafe code in the core implementations, and while it has much more options than we do, that's kind of the point. We're straight to the point, while rand is everything and the kitchen sink.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1048,"byte_end":1308,"line_start":39,"line_end":39,"column_start":1,"column_end":261}},{"value":"/ * `fastrand`, `oorandom`, `random-fast-rng`, or `randomize` - These are all minimal, zero-dep implementations of the PCG family of RNGs (Pcg32 and Pcg64). While these are decent, they are _much_ slower than wyrand (which beats the speed of these Pcg32 implementations while providing 64 random bits), and do not provide CSPRNGs.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1309,"byte_end":1641,"line_start":40,"line_end":40,"column_start":1,"column_end":333}},{"value":"/ * `getrandom` - The getrandom crate just provides OS entropy sources. It is not meant for random number generation. In fact, we provide it as an optional entropy source.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1642,"byte_end":1815,"line_start":41,"line_end":41,"column_start":1,"column_end":174}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1816,"byte_end":1819,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## RNG Implementations","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1820,"byte_end":1846,"line_start":43,"line_end":43,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1847,"byte_end":1850,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ **RNG**|**nanorand type**|**Output Size**|**Cryptographically Secure**|**Speed**<sup>1</sup>|**Notes**|**Original Implementation**","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1851,"byte_end":1985,"line_start":45,"line_end":45,"column_start":1,"column_end":135}},{"value":"/ :-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":1986,"byte_end":2045,"line_start":46,"line_end":46,"column_start":1,"column_end":60}},{"value":"/ wyrand|[nanorand::WyRand](rand/wyrand/struct.WyRand.html), [nanorand::tls::TlsWyRand](tls/fn.tls_rng.html)|64 bits (`u64`)|🚫|10.09 GB/s||[https://github.com/lemire/testingRNG/blob/master/source/wyrand.h](https://github.com/lemire/testingRNG/blob/master/source/wyrand.h)","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2046,"byte_end":2322,"line_start":47,"line_end":47,"column_start":1,"column_end":274}},{"value":"/ Pcg64|[nanorand::Pcg64](rand/pcg64/struct.Pcg64.html)|64 bits (`u64`)|🚫|2.3 GB/s||[https://github.com/rkern/pcg64](https://github.com/rkern/pcg64)","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2323,"byte_end":2476,"line_start":48,"line_end":48,"column_start":1,"column_end":151}},{"value":"/ ChaCha|[nanorand::ChaCha](rand/chacha/struct.ChaCha.html)|512 bits (`[u32; 16]`)|✅|150 MB/s (ChaCha8), 70 MB/s (ChaCha20)|Only works in Rust 1.47 or above|[https://cr.yp.to/chacha.html](https://cr.yp.to/chacha.html)","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2477,"byte_end":2698,"line_start":49,"line_end":49,"column_start":1,"column_end":220}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2699,"byte_end":2702,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ <sup>1. Speed benchmarked on an Intel Core i7 8086k processor running at 5.1 GHz</sup>","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2703,"byte_end":2793,"line_start":51,"line_end":51,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2794,"byte_end":2797,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ## Entropy Sources","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2798,"byte_end":2820,"line_start":53,"line_end":53,"column_start":1,"column_end":23}},{"value":"/ _Listed in order of priority_","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2821,"byte_end":2854,"line_start":54,"line_end":54,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2855,"byte_end":2858,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ * If the `getrandom` feature is enabled, then [getrandom::getrandom](https://docs.rs/getrandom/*/getrandom/fn.getrandom.html) will be called.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":2859,"byte_end":3004,"line_start":56,"line_end":56,"column_start":1,"column_end":146}},{"value":"/ * If the `rdseed` feature is enabled, and is running on an x86(-64) system with the [RDSEED](https://en.wikipedia.org/wiki/RDRAND) instruction, then","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":3005,"byte_end":3157,"line_start":57,"line_end":57,"column_start":1,"column_end":153}},{"value":"/   we will attempt to source as much entropy as possible via our [rdseed_entropy](entropy::rdseed_entropy) function","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":3158,"byte_end":3276,"line_start":58,"line_end":58,"column_start":1,"column_end":119}},{"value":"/ * Linux and Android will attempt to use the [`getrandom`](https://man7.org/linux/man-pages/man2/getrandom.2.html) syscall.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":3277,"byte_end":3403,"line_start":59,"line_end":59,"column_start":1,"column_end":127}},{"value":"/ * macOS and iOS (Darwin-based systems) will use Security.framework's [`SecRandomCopyBytes`](https://developer.apple.com/documentation/security/1399291-secrandomcopybytes).","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":3404,"byte_end":3579,"line_start":60,"line_end":60,"column_start":1,"column_end":176}},{"value":"/ * Windows","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":3580,"byte_end":3593,"line_start":61,"line_end":61,"column_start":1,"column_end":14}},{"value":"/   * If we're targeting UWP, then the [`BCryptGenRandom`](https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom) is used with system-preferred RNG (`BCRYPT_USE_SYSTEM_PREFERRED_RNG`).","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":3594,"byte_end":3810,"line_start":62,"line_end":62,"column_start":1,"column_end":217}},{"value":"/   * Otherwise, we'll use [`RtlGenRandom`](https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom).","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":3811,"byte_end":3943,"line_start":63,"line_end":63,"column_start":1,"column_end":133}},{"value":"/ * If all else fails, and the `std` feature is enabled, we'll resort to pulling bytes from the current system unix time ([entropy::emergency_system_time_entropy]), and screwing with them via XOR and endianness operations.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":3944,"byte_end":4168,"line_start":64,"line_end":64,"column_start":1,"column_end":225}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4169,"byte_end":4172,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ## Feature Flags","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4173,"byte_end":4193,"line_start":66,"line_end":66,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4194,"byte_end":4197,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * `std` (default) - Enables Rust `std` lib features, such as seeding from OS entropy sources.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4198,"byte_end":4295,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ * `tls` (default) - Enables a thread-local WyRand RNG (see below). Requires `tls` to be enabled.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4296,"byte_end":4396,"line_start":69,"line_end":69,"column_start":1,"column_end":101}},{"value":"/ * `wyrand` (default) - Enable the [wyrand](rand/wyrand/struct.WyRand.html) RNG.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4397,"byte_end":4480,"line_start":70,"line_end":70,"column_start":1,"column_end":84}},{"value":"/ * `pcg64` (default) - Enable the [Pcg64](rand/pcg64/struct.Pcg64.html)  RNG.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4481,"byte_end":4561,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/ * `chacha` - Enable the [ChaCha](rand/chacha/struct.ChaCha.html) RNG. Requires Rust 1.47 or later.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4562,"byte_end":4664,"line_start":72,"line_end":72,"column_start":1,"column_end":103}},{"value":"/ * `rdseed` - On x86/x86_64 platforms, the `rdseed` intrinsic will be used when OS entropy isn't available.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4665,"byte_end":4775,"line_start":73,"line_end":73,"column_start":1,"column_end":111}},{"value":"/ * `zeroize` - Implement the [Zeroize](https://crates.io/crates/zeroize) trait for all RNGs.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4776,"byte_end":4871,"line_start":74,"line_end":74,"column_start":1,"column_end":96}},{"value":"/ * `getrandom` - Use the [`getrandom`](https://crates.io/crates/getrandom) crate as an entropy source.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4872,"byte_end":4977,"line_start":75,"line_end":75,"column_start":1,"column_end":106}},{"value":"/ Works on most systems, optional due to the fact that it brings in more dependencies.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":4978,"byte_end":5066,"line_start":76,"line_end":76,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"crypto","qualname":"::crypto","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\mod.rs","parent":null,"children":[{"krate":0,"index":9}],"decl_id":null,"docs":" Implementation of cryptography, for CSPRNGs.\n","sig":null,"attributes":[{"value":"/ Implementation of cryptography, for CSPRNGs.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5148,"byte_end":5196,"line_start":83,"line_end":83,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha","qualname":"::crypto::chacha","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":23}],"decl_id":null,"docs":" Implementation of the ChaCha cryptographic primitives.  \n More details can be seen at https://en.wikipedia.org/wiki/Salsa20\n","sig":null,"attributes":[{"value":"/ Implementation of the ChaCha cryptographic primitives.  ","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\mod.rs","byte_start":5437,"byte_end":5497,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"/ More details can be seen at https://en.wikipedia.org/wiki/Salsa20","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\mod.rs","byte_start":5498,"byte_end":5567,"line_start":2,"line_end":2,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","byte_start":6396,"byte_end":6408,"line_start":29,"line_end":29,"column_start":8,"column_end":20},"name":"chacha_block","qualname":"::crypto::chacha::chacha_block","value":"pub fn chacha_block(u8, [u32; ]) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Do one ChaCha round on the input data.\n","sig":null,"attributes":[{"value":"/ Do one ChaCha round on the input data.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","byte_start":6346,"byte_end":6388,"line_start":28,"line_end":28,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","byte_start":7157,"byte_end":7168,"line_start":53,"line_end":53,"column_start":8,"column_end":19},"name":"chacha_init","qualname":"::crypto::chacha::chacha_init","value":"pub fn chacha_init([u8; ], [u8; ]) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Initialize the ChaCha internal state, with a 256-bit key and 64-bit nonce.\n","sig":null,"attributes":[{"value":"/ Initialize the ChaCha internal state, with a 256-bit key and 64-bit nonce.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","byte_start":7071,"byte_end":7149,"line_start":52,"line_end":52,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","byte_start":7963,"byte_end":7987,"line_start":80,"line_end":80,"column_start":8,"column_end":32},"name":"chacha_increment_counter","qualname":"::crypto::chacha::chacha_increment_counter","value":"pub fn chacha_increment_counter(&mut [u32; ]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Increment the 64-bit counter of the internal ChaCha20 state by 1.\n Returns `false` if it overflows, `true` otherwise.\n","sig":null,"attributes":[{"value":"/ Increment the 64-bit counter of the internal ChaCha20 state by 1.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","byte_start":7831,"byte_end":7900,"line_start":78,"line_end":78,"column_start":1,"column_end":70}},{"value":"/ Returns `false` if it overflows, `true` otherwise.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\chacha.rs","byte_start":7901,"byte_end":7955,"line_start":79,"line_end":79,"column_start":1,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"entropy","qualname":"::entropy","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":36},{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" Sources for obtaining entropy.\n","sig":null,"attributes":[{"value":"/ Sources for obtaining entropy.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5213,"byte_end":5247,"line_start":85,"line_end":85,"column_start":1,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\windows.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"windows","qualname":"::entropy::windows","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\windows.rs","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":35}],"decl_id":null,"docs":" An entropy generator for Windows, using WinAPI's `RtlGenRandom` function.\n","sig":null,"attributes":[{"value":"cfg(all(windows, not(target_vendor = \"uwp\"), not(feature = \"getrandom\")))","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":11845,"byte_end":11921,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ An entropy generator for Windows, using WinAPI's `RtlGenRandom` function.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":11922,"byte_end":11999,"line_start":35,"line_end":35,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\windows.rs","byte_start":16081,"byte_end":16100,"line_start":9,"line_end":9,"column_start":8,"column_end":27},"name":"entropy_from_system","qualname":"::entropy::windows::entropy_from_system","value":"pub fn entropy_from_system(&mut [u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Obtain a random 64-bit number using WinAPI's `RtlGenRandom` function.\n","sig":null,"attributes":[{"value":"/ Obtain a random 64-bit number using WinAPI's `RtlGenRandom` function.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\windows.rs","byte_start":16000,"byte_end":16073,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":12842,"byte_end":12871,"line_start":65,"line_end":65,"column_start":8,"column_end":37},"name":"emergency_system_time_entropy","qualname":"::entropy::emergency_system_time_entropy","value":"pub fn emergency_system_time_entropy(&mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" An emergency system time-based entropy source.\n Should be slightly better than just piping the system time into a seed,\n but for the love of god, don't use this unless you have a REALLY good reason.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":12602,"byte_end":12625,"line_start":61,"line_end":61,"column_start":1,"column_end":24}},{"value":"/ An emergency system time-based entropy source.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":12626,"byte_end":12676,"line_start":62,"line_end":62,"column_start":1,"column_end":51}},{"value":"/ Should be slightly better than just piping the system time into a seed,","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":12677,"byte_end":12752,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ but for the love of god, don't use this unless you have a REALLY good reason.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":12753,"byte_end":12834,"line_start":64,"line_end":64,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":15309,"byte_end":15323,"line_start":156,"line_end":156,"column_start":8,"column_end":22},"name":"rdseed_entropy","qualname":"::entropy::rdseed_entropy","value":"pub fn rdseed_entropy(&mut [u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" A wrapper function for non-x86(64) platforms that do not have rdseed.\n","sig":null,"attributes":[{"value":"/ A wrapper function for non-x86(64) platforms that do not have rdseed.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":15132,"byte_end":15205,"line_start":151,"line_end":151,"column_start":1,"column_end":74}},{"value":"cfg(any(not(feature = \"rdseed\"),\n          not(any(target_arch = \"x86\", target_arch = \"x86_64\"))))","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":15206,"byte_end":15301,"line_start":152,"line_end":155,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":15561,"byte_end":15575,"line_start":164,"line_end":164,"column_start":8,"column_end":22},"name":"backup_entropy","qualname":"::entropy::backup_entropy","value":"pub fn backup_entropy(&mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" A backup entropy source, trying rdseed first,\n and if it fails or does not complete, combining it with or\n using system time-based entropy generation.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":15369,"byte_end":15392,"line_start":160,"line_end":160,"column_start":1,"column_end":24}},{"value":"/ A backup entropy source, trying rdseed first,","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":15393,"byte_end":15442,"line_start":161,"line_end":161,"column_start":1,"column_end":50}},{"value":"/ and if it fails or does not complete, combining it with or","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":15443,"byte_end":15505,"line_start":162,"line_end":162,"column_start":1,"column_end":63}},{"value":"/ using system time-based entropy generation.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":15506,"byte_end":15553,"line_start":163,"line_end":163,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gen","qualname":"::gen","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98}],"decl_id":null,"docs":" Traits for generating types from an RNG.\n","sig":null,"attributes":[{"value":"/ Traits for generating types from an RNG.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5265,"byte_end":5309,"line_start":87,"line_end":87,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16277,"byte_end":16286,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"RandomGen","qualname":"::gen::RandomGen","value":"RandomGen<R: RNG>","parent":null,"children":[{"krate":0,"index":54}],"decl_id":null,"docs":" A trait used for generating a random object with an RNG,\n","sig":null,"attributes":[{"value":"/ A trait used for generating a random object with an RNG,","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16206,"byte_end":16266,"line_start":3,"line_end":3,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16390,"byte_end":16396,"line_start":6,"line_end":6,"column_start":5,"column_end":11},"name":"random","qualname":"::gen::RandomGen::random","value":"pub fn random(&mut R) -> Self","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Return a random instance of the implementing type, from the specified RNG instance.\n","sig":null,"attributes":[{"value":"/ Return a random instance of the implementing type, from the specified RNG instance.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16298,"byte_end":16385,"line_start":5,"line_end":5,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16507,"byte_end":16518,"line_start":10,"line_end":10,"column_start":11,"column_end":22},"name":"RandomRange","qualname":"::gen::RandomRange","value":"RandomRange<R: RNG>: RandomGen<R>","parent":null,"children":[{"krate":0,"index":57}],"decl_id":null,"docs":" A trait used for generating a random number within a range, with an RNG,\n","sig":null,"attributes":[{"value":"/ A trait used for generating a random number within a range, with an RNG,","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16420,"byte_end":16496,"line_start":9,"line_end":9,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16634,"byte_end":16646,"line_start":12,"line_end":12,"column_start":5,"column_end":17},"name":"random_range","qualname":"::gen::RandomRange::random_range","value":"pub fn random_range(&mut R, Self, Self) -> Self","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Return a ranged number of the implementing type, from the specified RNG instance.\n","sig":null,"attributes":[{"value":"/ Return a ranged number of the implementing type, from the specified RNG instance.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16544,"byte_end":16629,"line_start":11,"line_end":11,"column_start":2,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rand","qualname":"::rand","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":154},{"krate":0,"index":194},{"krate":0,"index":245}],"decl_id":null,"docs":" RNG algorithms.\n","sig":null,"attributes":[{"value":"/ RNG algorithms.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5323,"byte_end":5342,"line_start":89,"line_end":89,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wyrand","qualname":"::rand::wyrand","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":150},{"krate":0,"index":152}],"decl_id":null,"docs":" Implementation of the wyrand PRNG algorithm.\n More details can be seen at https://github.com/wangyi-fudan/wyhash\n","sig":null,"attributes":[{"value":"/ Implementation of the wyrand PRNG algorithm.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20089,"byte_end":20137,"line_start":10,"line_end":10,"column_start":1,"column_end":49}},{"value":"/ More details can be seen at https://github.com/wangyi-fudan/wyhash","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20138,"byte_end":20208,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"cfg(feature = \"wyrand\")","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20209,"byte_end":20235,"line_start":12,"line_end":12,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22447,"byte_end":22453,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"WyRand","qualname":"::rand::wyrand::WyRand","value":"WyRand {  }","parent":null,"children":[{"krate":0,"index":133}],"decl_id":null,"docs":" An instance of the WyRand random number generator.\n Seeded from the system entropy generator when available.\n **This generator is _NOT_ cryptographically secure.**\n #[repr(transparent)]\n","sig":null,"attributes":[{"value":"/ An instance of the WyRand random number generator.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22118,"byte_end":22172,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/ Seeded from the system entropy generator when available.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22173,"byte_end":22233,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ **This generator is _NOT_ cryptographically secure.**","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22234,"byte_end":22291,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22292,"byte_end":22316,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22415,"byte_end":22435,"line_start":14,"line_end":14,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22585,"byte_end":22588,"line_start":21,"line_end":21,"column_start":9,"column_end":12},"name":"new","qualname":"<WyRand>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`WyRand`] instance, seeding from the system's default source of entropy.\n","sig":null,"attributes":[{"value":"/ Create a new [`WyRand`] instance, seeding from the system's default source of entropy.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22486,"byte_end":22576,"line_start":20,"line_end":20,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22693,"byte_end":22701,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"name":"new_seed","qualname":"<WyRand>::new_seed","value":"pub fn new_seed(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`WyRand`] instance, using a provided seed.\n","sig":null,"attributes":[{"value":"/ Create a new [`WyRand`] instance, using a provided seed.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22624,"byte_end":22684,"line_start":25,"line_end":25,"column_start":2,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pcg64","qualname":"::rand::pcg64","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":173},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":190},{"krate":0,"index":192}],"decl_id":null,"docs":" Implementation of the Pcg64 PRNG algorithm.\n More details can be seen at https://www.pcg-random.org/index.html\n","sig":null,"attributes":[{"value":"/ Implementation of the Pcg64 PRNG algorithm.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20253,"byte_end":20300,"line_start":15,"line_end":15,"column_start":1,"column_end":48}},{"value":"/ More details can be seen at https://www.pcg-random.org/index.html","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20301,"byte_end":20370,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"cfg(feature = \"pcg64\")","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20371,"byte_end":20396,"line_start":17,"line_end":17,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24710,"byte_end":24715,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"Pcg64","qualname":"::rand::pcg64::Pcg64","value":"Pcg64 {  }","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"decl_id":null,"docs":" An instance of the Pcg64 random number generator.\n Seeded from the system entropy generator when available.\n **This generator is _NOT_ cryptographically secure.**\n","sig":null,"attributes":[{"value":"/ An instance of the Pcg64 random number generator.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24417,"byte_end":24470,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"/ Seeded from the system entropy generator when available.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24471,"byte_end":24531,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/ **This generator is _NOT_ cryptographically secure.**","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24532,"byte_end":24589,"line_start":12,"line_end":12,"column_start":1,"column_end":58}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24688,"byte_end":24698,"line_start":15,"line_end":15,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24897,"byte_end":24900,"line_start":25,"line_end":25,"column_start":9,"column_end":12},"name":"new","qualname":"<Pcg64>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Pcg64`] instance, seeding from the system's default source of entropy.\n","sig":null,"attributes":[{"value":"/ Create a new [`Pcg64`] instance, seeding from the system's default source of entropy.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24774,"byte_end":24863,"line_start":23,"line_end":23,"column_start":2,"column_end":91}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24865,"byte_end":24888,"line_start":24,"line_end":24,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":25191,"byte_end":25199,"line_start":36,"line_end":36,"column_start":9,"column_end":17},"name":"new_seed","qualname":"<Pcg64>::new_seed","value":"pub fn new_seed(u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Pcg64`] instance, using a provided seed.\n","sig":null,"attributes":[{"value":"/ Create a new [`Pcg64`] instance, using a provided seed.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":25123,"byte_end":25182,"line_start":35,"line_end":35,"column_start":2,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha","qualname":"::rand::chacha","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":223},{"krate":0,"index":227},{"krate":0,"index":241},{"krate":0,"index":243}],"decl_id":null,"docs":" Implementation of the ChaCha CSPRNG algorithm.\n More details can be seen at https://en.wikipedia.org/wiki/Salsa20\n","sig":null,"attributes":[{"value":"/ Implementation of the ChaCha CSPRNG algorithm.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20413,"byte_end":20463,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/ More details can be seen at https://en.wikipedia.org/wiki/Salsa20","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20464,"byte_end":20533,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"cfg(feature = \"chacha\")","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20534,"byte_end":20560,"line_start":22,"line_end":22,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27209,"byte_end":27215,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"ChaCha","qualname":"::rand::chacha::ChaCha","value":"ChaCha {  }","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":215}],"decl_id":null,"docs":" An instance of the ChaCha random number generator.\n Seeded from the system entropy generator when available.\n **This generator _is theoretically_ cryptographically secure.**\n","sig":null,"attributes":[{"value":"/ An instance of the ChaCha random number generator.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":26905,"byte_end":26959,"line_start":6,"line_end":6,"column_start":1,"column_end":55}},{"value":"/ Seeded from the system entropy generator when available.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":26960,"byte_end":27020,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"/ **This generator _is theoretically_ cryptographically secure.**","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27021,"byte_end":27088,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27187,"byte_end":27197,"line_start":11,"line_end":11,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27367,"byte_end":27370,"line_start":19,"line_end":19,"column_start":9,"column_end":12},"name":"new","qualname":"<ChaCha>::new","value":"pub fn new(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`ChaCha`] instance, seeding from the system's default source of entropy.\n","sig":null,"attributes":[{"value":"/ Create a new [`ChaCha`] instance, seeding from the system's default source of entropy.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27268,"byte_end":27358,"line_start":18,"line_end":18,"column_start":2,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27743,"byte_end":27750,"line_start":29,"line_end":29,"column_start":9,"column_end":16},"name":"new_key","qualname":"<ChaCha>::new_key","value":"pub fn new_key(u8, [u8; ], [u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`ChaCha`] instance, using the provided key and nonce.\n","sig":null,"attributes":[{"value":"/ Create a new [`ChaCha`] instance, using the provided key and nonce.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27663,"byte_end":27734,"line_start":28,"line_end":28,"column_start":2,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20643,"byte_end":20646,"line_start":26,"line_end":26,"column_start":11,"column_end":14},"name":"RNG","qualname":"::rand::RNG","value":"RNG: Clone","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":260}],"decl_id":null,"docs":" A trait that represents a random number generator.\n","sig":null,"attributes":[{"value":"/ A trait that represents a random number generator.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20578,"byte_end":20632,"line_start":25,"line_end":25,"column_start":1,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20704,"byte_end":20710,"line_start":28,"line_end":28,"column_start":7,"column_end":13},"name":"Output","qualname":"::rand::RNG::Output","value":"type Output: AsRef<[u8]>;","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" The byte output that this RNG emits.\n","sig":null,"attributes":[{"value":"/ The byte output that this RNG emits.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20657,"byte_end":20697,"line_start":27,"line_end":27,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20806,"byte_end":20810,"line_start":31,"line_end":31,"column_start":5,"column_end":9},"name":"rand","qualname":"::rand::RNG::rand","value":"pub fn rand(&mut Self) -> Self::Output","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Generates a random sequence of bytes, seeding from the internal state.\n","sig":null,"attributes":[{"value":"/ Generates a random sequence of bytes, seeding from the internal state.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20727,"byte_end":20801,"line_start":30,"line_end":30,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20906,"byte_end":20920,"line_start":33,"line_end":33,"column_start":5,"column_end":19},"name":"rand_with_seed","qualname":"::rand::RNG::rand_with_seed","value":"pub fn rand_with_seed(&[u8]) -> Self::Output","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Generates a random sequence of bytes, with a custom seed.\n","sig":null,"attributes":[{"value":"/ Generates a random sequence of bytes, with a custom seed.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20840,"byte_end":20901,"line_start":32,"line_end":32,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21035,"byte_end":21043,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"name":"generate","qualname":"::rand::RNG::generate","value":"pub fn generate<R: RandomGen<Self>>(&mut Self) -> R","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Generates a random of the specified type, seeding from the internal state.\n","sig":null,"attributes":[{"value":"/ Generates a random of the specified type, seeding from the internal state.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20952,"byte_end":21030,"line_start":34,"line_end":34,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21151,"byte_end":21155,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"fill","qualname":"::rand::RNG::fill","value":"pub fn fill<R: RandomGen<Self>, A: AsMut<[R]>>(&mut Self, A)","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Fill an array with the specified type.\n","sig":null,"attributes":[{"value":"/ Fill an array with the specified type.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21104,"byte_end":21146,"line_start":38,"line_end":38,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21402,"byte_end":21416,"line_start":44,"line_end":44,"column_start":5,"column_end":19},"name":"generate_range","qualname":"::rand::RNG::generate_range","value":"pub fn generate_range<R: RandomRange<Self>>(&mut Self, R, R) -> R","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Generates a random of the specified type, seeding from the internal state.\n","sig":null,"attributes":[{"value":"/ Generates a random of the specified type, seeding from the internal state.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21319,"byte_end":21397,"line_start":43,"line_end":43,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21559,"byte_end":21566,"line_start":48,"line_end":48,"column_start":5,"column_end":12},"name":"shuffle","qualname":"::rand::RNG::shuffle","value":"pub fn shuffle<I, S: AsMut<[I]>>(&mut Self, S)","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Shuffle a slice, using the RNG.\n","sig":null,"attributes":[{"value":"/ Shuffle a slice, using the RNG.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21519,"byte_end":21554,"line_start":47,"line_end":47,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21862,"byte_end":21868,"line_start":57,"line_end":57,"column_start":5,"column_end":11},"name":"reseed","qualname":"::rand::RNG::reseed","value":"pub fn reseed(&mut Self, &[u8])","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Reseeds the RNG using a custom seed.\n","sig":null,"attributes":[{"value":"/ Reseeds the RNG using a custom seed.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":21817,"byte_end":21857,"line_start":56,"line_end":56,"column_start":2,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tls","qualname":"::tls","value":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":286},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":284}],"decl_id":null,"docs":" Provides a thread-local [WyRand] RNG.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5357,"byte_end":5380,"line_start":91,"line_end":91,"column_start":1,"column_end":24}},{"value":"/ Provides a thread-local [WyRand] RNG.","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5381,"byte_end":5422,"line_start":92,"line_end":92,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":29793,"byte_end":29802,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"TlsWyRand","qualname":"::tls::TlsWyRand","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30813,"byte_end":30820,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"tls_rng","qualname":"::tls::tls_rng","value":"pub fn tls_rng() -> TlsWyRand","parent":null,"children":[],"decl_id":null,"docs":" Fetch a thread-local [WyRand]\n ```rust\n use nanorand::RNG;","sig":null,"attributes":[{"value":"/ Fetch a thread-local [WyRand]","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30341,"byte_end":30374,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30375,"byte_end":30386,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/ use nanorand::RNG;","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30387,"byte_end":30409,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30410,"byte_end":30413,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let mut rng = nanorand::tls_rng();","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30414,"byte_end":30452,"line_start":36,"line_end":36,"column_start":1,"column_end":39}},{"value":"/ println!(\"Random number: {}\", rng.generate::<u64>());","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30453,"byte_end":30510,"line_start":37,"line_end":37,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30511,"byte_end":30518,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ This cannot be passed to another thread, as something like this will fail to compile:","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30519,"byte_end":30608,"line_start":39,"line_end":39,"column_start":1,"column_end":90}},{"value":"/ ```compile_fail","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30609,"byte_end":30628,"line_start":40,"line_end":40,"column_start":1,"column_end":20}},{"value":"/ use nanorand::RNG;","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30629,"byte_end":30651,"line_start":41,"line_end":41,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30652,"byte_end":30655,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let mut rng = nanorand::tls_rng();","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30656,"byte_end":30694,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/ std::thread::spawn(move || {","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30695,"byte_end":30727,"line_start":44,"line_end":44,"column_start":1,"column_end":33}},{"value":"/     println!(\"Random number: {}\", rng.generate::<u64>());","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30728,"byte_end":30789,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ });","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30790,"byte_end":30797,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30798,"byte_end":30805,"line_start":47,"line_end":47,"column_start":1,"column_end":8}}]}],"impls":[{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22476,"byte_end":22482,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22762,"byte_end":22768,"line_start":31,"line_end":31,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":23085,"byte_end":23091,"line_start":42,"line_end":42,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":23939,"byte_end":23945,"line_start":69,"line_end":69,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":24025,"byte_end":24031,"line_start":75,"line_end":75,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24765,"byte_end":24770,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":25727,"byte_end":25732,"line_start":65,"line_end":65,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":26074,"byte_end":26079,"line_start":78,"line_end":78,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":26547,"byte_end":26552,"line_start":98,"line_end":98,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":26678,"byte_end":26683,"line_start":108,"line_end":108,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27258,"byte_end":27264,"line_start":17,"line_end":17,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27899,"byte_end":27905,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":28220,"byte_end":28226,"line_start":46,"line_end":46,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":29357,"byte_end":29363,"line_start":85,"line_end":85,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":29475,"byte_end":29481,"line_start":94,"line_end":94,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":29833,"byte_end":29842,"line_start":14,"line_end":14,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30100,"byte_end":30109,"line_start":24,"line_end":24,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5205,"byte_end":5211,"line_start":84,"line_end":84,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":8}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\crypto\\mod.rs","byte_start":5576,"byte_end":5582,"line_start":3,"line_end":3,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":9}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5256,"byte_end":5263,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":25}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\entropy\\mod.rs","byte_start":12008,"byte_end":12015,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":29}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5318,"byte_end":5321,"line_start":88,"line_end":88,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5351,"byte_end":5355,"line_start":90,"line_end":90,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":101}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20244,"byte_end":20250,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":118}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20405,"byte_end":20410,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":154}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20569,"byte_end":20575,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":194}},{"kind":"Mod","span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\lib.rs","byte_start":5431,"byte_end":5434,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":261}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\gen.rs","byte_start":16528,"byte_end":16537,"line_start":10,"line_end":10,"column_start":32,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":52},"to":{"krate":0,"index":55}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22476,"byte_end":22482,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":22762,"byte_end":22768,"line_start":31,"line_end":31,"column_start":18,"column_end":24},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":132},"to":{"krate":2,"index":2831}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":23085,"byte_end":23091,"line_start":42,"line_end":42,"column_start":14,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":132},"to":{"krate":0,"index":245}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":23939,"byte_end":23945,"line_start":69,"line_end":69,"column_start":16,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":132},"to":{"krate":2,"index":2474}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\wyrand.rs","byte_start":24025,"byte_end":24031,"line_start":75,"line_end":75,"column_start":18,"column_end":24},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":132},"to":{"krate":2,"index":8901}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":24765,"byte_end":24770,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":25727,"byte_end":25732,"line_start":65,"line_end":65,"column_start":18,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":169},"to":{"krate":2,"index":2831}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":26074,"byte_end":26079,"line_start":78,"line_end":78,"column_start":14,"column_end":19},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":169},"to":{"krate":0,"index":245}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":26547,"byte_end":26552,"line_start":98,"line_end":98,"column_start":16,"column_end":21},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":169},"to":{"krate":2,"index":2474}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\pcg64.rs","byte_start":26678,"byte_end":26683,"line_start":108,"line_end":108,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":169},"to":{"krate":2,"index":8901}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27258,"byte_end":27264,"line_start":17,"line_end":17,"column_start":6,"column_end":12},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":27899,"byte_end":27905,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":212},"to":{"krate":2,"index":2831}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":28220,"byte_end":28226,"line_start":46,"line_end":46,"column_start":14,"column_end":20},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":212},"to":{"krate":0,"index":245}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":29357,"byte_end":29363,"line_start":85,"line_end":85,"column_start":16,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":212},"to":{"krate":2,"index":2474}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\chacha.rs","byte_start":29475,"byte_end":29481,"line_start":94,"line_end":94,"column_start":18,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":212},"to":{"krate":2,"index":8901}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\rand\\mod.rs","byte_start":20648,"byte_end":20653,"line_start":26,"line_end":26,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":2474},"to":{"krate":0,"index":245}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":29833,"byte_end":29842,"line_start":14,"line_end":14,"column_start":16,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":3064}},{"span":{"file_name":"C:\\Users\\malique\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.5.2\\src\\tls.rs","byte_start":30100,"byte_end":30109,"line_start":24,"line_end":24,"column_start":19,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":276},"to":{"krate":2,"index":3077}}]}